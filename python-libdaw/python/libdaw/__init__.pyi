from collections.abc import Sequence
from typing import Self, Any

class Stream:
    def __init__(self, value: int | Sequence[float]) -> None:
        '''Create a new stream with either the number of channels or the given starting values.
        '''
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __str__(self) -> str: ...
    def __add__(self, other: Self) -> Self: ...
    def __iadd__(self, other: Self) -> Self: ...
    def __mul__(self, other: Self) -> Self: ...
    def __imul__(self, other: Self) -> Self: ...
    def __copy__(self) -> Self: ...
    def __deepcopy__(self, memo: dict[Any, Any]) -> Self: ...

class Node:
    def process(self, inputs: Sequence[Stream]) -> Sequence[Stream]: ...
    def __eq__(self, other: Self) -> bool: ...

class FrequencyNode(Node):
    @property
    def frequency(self) -> float: ...

    @frequency.setter
    def frequency(self, value: float) -> None: ...

def play(node: Node, sample_rate: int, channels: int) -> None: ...

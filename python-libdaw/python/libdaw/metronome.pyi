from collections.abc import MutableMapping
from typing import Any
from python.libdaw.time import Timestamp

class Beat:
    def __init__(self, value: float) -> None: ...
    def __lt__(self, other: Beat) -> bool: ...
    def __le__(self, other: Beat) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __gt__(self, other: Beat) -> bool: ...
    def __ge__(self, other: Beat) -> bool: ...
    def __copy__(self) -> Beat: ...
    def __deepcopy__(self, memo: MutableMapping[Any, Any]) -> Beat: ...
    @property
    def value(self) -> float: ...

class BeatsPerMinute:
    def __init__(self, value: float) -> None: ...
    def __lt__(self, other: BeatsPerMinute) -> bool: ...
    def __le__(self, other: BeatsPerMinute) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __gt__(self, other: BeatsPerMinute) -> bool: ...
    def __ge__(self, other: BeatsPerMinute) -> bool: ...
    def __copy__(self) -> BeatsPerMinute: ...
    def __deepcopy__(self, memo: MutableMapping[Any, Any]) -> BeatsPerMinute: ...
    @property
    def value(self) -> float: ...

class TempoInstruction:
    def __init__(self, beat: Beat, tempo: BeatsPerMinute) -> None: ...
    def __lt__(self, other: TempoInstruction) -> bool: ...
    def __le__(self, other: TempoInstruction) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __gt__(self, other: TempoInstruction) -> bool: ...
    def __ge__(self, other: TempoInstruction) -> bool: ...
    def __copy__(self) -> TempoInstruction: ...
    def __deepcopy__(self, memo: MutableMapping[Any, Any]) -> TempoInstruction: ...

    @property
    def beat(self) -> Beat: ...

    @property
    def tempo(self) -> BeatsPerMinute: ...

class Metronome:
    def __init__(self) -> None: ...
    def add_tempo_instruction(self, instruction: TempoInstruction) -> None: ...
    def beat_to_time(self) -> Timestamp: ...

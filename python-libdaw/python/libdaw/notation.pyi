from collections import abc
from typing import Self
from libdaw.metronome import Beat, Metronome
from libdaw.nodes.instrument import Tone
from libdaw.pitch import A440, PitchStandard, PitchClass

type _Item = Chord | Note | Rest | Overlapped | Sequence
type _NotePitch = Step | Pitch

class _ChordIterator:
    def __iter__(self) -> Self: ...
    def __next__(self) -> _NotePitch: ...

class _ScaleIterator:
    def __iter__(self) -> Self: ...
    def __next__(self) -> _NotePitch: ...

class _OverlappedIterator:
    def __iter__(self) -> Self: ...
    def __next__(self) -> _Item: ...

class _SequenceIterator:
    def __iter__(self) -> Self: ...
    def __next__(self) -> _Item: ...

class Pitch:
    def __new__(cls: type, pitch_class: PitchClass, octave: int | None = None, octave_shift: int = 0) -> None: ...

    @property
    def pitch_class(self) -> PitchClass: ...
    @pitch_class.setter
    def pitch_class(self, value: PitchClass) -> None: ...

    @property
    def octave(self) -> int | None: ...
    @octave.setter
    def octave(self, value: int | None) -> None: ...

    @property
    def octave_shift(self) -> int: ...
    @octave_shift.setter
    def octave_shift(self, value: int) -> None: ...

class Step:
    def __new__(cls: type, step: int, octave_shift: int = 0, adjustment: float = 0.0) -> None: ...

    @property
    def step(self) -> int: ...
    @step.setter
    def step(self, value: int) -> None: ...

    @property
    def octave_shift(self) -> int: ...
    @octave_shift.setter
    def octave_shift(self, value: int) -> None: ...

    @property
    def adjustment(self) -> float: ...
    @adjustment.setter
    def adjustment(self, value: float) -> None: ...

class Chord:
    def __new__(cls: type, pitches: abc.Sequence[_NotePitch], length: Beat | None = None, duration: Beat | None = None) -> None: ...
    @staticmethod
    def loads(source: str) -> Chord: ...

    def tones(
        self,
        *,
        offset: Beat = Beat(0),
        metronome: Metronome = Metronome(),
        pitch_standard: PitchStandard = A440(),
    ) -> abc.Sequence[Tone]: ...

    @property
    def length(self) -> Beat | None: ...
    @length.setter
    def length(self, value: Beat | None) -> None: ...
    @property
    def duration(self) -> Beat | None: ...
    @duration.setter
    def duration(self, value: Beat | None) -> None: ...

    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> _NotePitch: ...
    def __setitem__(self, index: int, value: _NotePitch) -> None: ...
    def __delitem__(self, index: int) -> None: ...
    def __iter__(self) -> _ChordIterator: ...
    def insert(self, index: int, value: _NotePitch) -> None: ...
    def pop(self, index: int) -> _NotePitch: ...
    def append(self, value: _NotePitch) -> None: ...

class Note:
    def __new__(cls: type, pitch: _NotePitch, length: Beat | None = None, duration: Beat | None = None) -> None: ...

    @staticmethod
    def loads(source: str) -> Note: ...

    @property
    def pitch(self) -> _NotePitch: ...

    @pitch.setter
    def pitch(self, value: _NotePitch) -> None: ...

    def tone(
        self,
        *,
        offset: Beat = Beat(0),
        metronome: Metronome = Metronome(),
        pitch_standard: PitchStandard = A440(),
    ) -> Tone: ...

    @property
    def length(self) -> Beat | None: ...
    @length.setter
    def length(self, value: Beat | None) -> None: ...
    @property
    def duration(self) -> Beat | None: ...
    @duration.setter
    def duration(self, value: Beat | None) -> None: ...

class Overlapped:
    def __new__(cls: type, sections: abc.Sequence[_Item] | None = None) -> None: ...
    @staticmethod
    def loads(source: str) -> Overlapped: ...

    def tones(
        self,
        *,
        offset: Beat = Beat(0),
        metronome: Metronome = Metronome(),
        pitch_standard: PitchStandard = A440(),
    ) -> abc.Sequence[Tone]: ...
    def length(self, previous_length: Beat) -> Beat: ...
    def duration(self, previous_length: Beat) -> Beat: ...

    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> _Item: ...
    def __setitem__(self, index: int, value: _Item) -> None: ...
    def __delitem__(self, index: int) -> None: ...
    def __iter__(self) -> _OverlappedIterator: ...
    def insert(self, index: int, value: _Item) -> None: ...
    def pop(self, index: int) -> _Item: ...
    def append(self, value: _Item) -> None: ...

class Rest:
    def __new__(cls: type, length: Beat | None = None) -> None: ...

    @staticmethod
    def loads(source: str) -> Rest: ...

    @property
    def length(self) -> Beat | None: ...
    @length.setter
    def length(self, value: Beat | None) -> None: ...

class Sequence:
    def __new__(cls: type, items: abc.Sequence[_Item] | None = None): ...

    @staticmethod
    def loads(source: str) -> Sequence: ...

    def tones(
        self,
        *,
        offset: Beat = Beat(0),
        metronome: Metronome = Metronome(),
        pitch_standard: PitchStandard = A440(),
    ) -> abc.Sequence[Tone]: ...
    def length(self, previous_length: Beat) -> Beat: ...
    def duration(self, previous_length: Beat) -> Beat: ...

    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> _Item: ...
    def __setitem__(self, index: int, value: _Item) -> None: ...
    def __delitem__(self, index: int) -> None: ...
    def __iter__(self) -> _SequenceIterator: ...
    def insert(self, index: int, value: _Item) -> None: ...
    def pop(self, index: int) -> _Item: ...
    def append(self, value: _Item) -> None: ...

class Scale:
    def __new__(cls: type, pitches: abc.Sequence[_NotePitch]) -> None: ...

    @staticmethod
    def loads(source: str) -> Scale: ...

    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> _NotePitch: ...
    def __setitem__(self, index: int, value: _NotePitch) -> None: ...
    def __delitem__(self, index: int) -> None: ...
    def __iter__(self) -> _ScaleIterator: ...
    def insert(self, index: int, value: _NotePitch) -> None: ...
    def pop(self, index: int) -> _NotePitch: ...
    def append(self, value: _NotePitch) -> None: ...

def loads(source: str) -> _Item: ...

from typing import Any, Self
from enum import Enum, auto, unique

@unique
class PitchName(Enum):
    C = auto()
    D = auto()
    E = auto()
    F = auto()
    G = auto()
    A = auto()
    B = auto()

class PitchClass:
    def __init__(self, name: PitchName, adjustment: float = 0.0) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __copy__(self) -> Self: ...
    def __deepcopy__(self, memo: dict[Any, Any]) -> Self: ...

    @property
    def name(self) -> PitchName: ...
    @property
    def adjustment(self) -> float: ...

class Pitch:
    def __init__(self, pitch_class: PitchClass, octave: int) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __copy__(self) -> Self: ...
    def __deepcopy__(self, memo: dict[Any, Any]) -> Self: ...

    @property
    def pitch_class(self) -> PitchClass: ...

    @property
    def octave(self) -> int: ...

class PitchStandard:
    def resolve(self, Pitch) -> float: ...
    def __eq__(self, other: Any) -> bool: ...

class A440(PitchStandard): ...
class ScientificPitch(PitchStandard): ...
